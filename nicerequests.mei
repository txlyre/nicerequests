nice_method ::= NiceMethodGET
              | NiceMethodHEAD
              | NiceMethodPOST
              | NiceMethodPUT
              | NiceMethodDELETE
              | NiceMethodOPTIONS
              | NiceMethodPATCH
nice_request ::= NiceRequest nice_method string (assoclist string string) bytes
nice_response ::= NiceResponse int (assoclist string string) bytes

niceStatusCode? :: nice_response -> int
niceStatusCode? (NiceResponse status_code _ _) = status_code

niceHeaders? :: nice_response -> assoclist string string
niceHeaders? (NiceResponse _ headers _) = headers

niceBody? :: nice_response -> bytes
niceBody? (NiceResponse _ _ body) = body

niceBodyString? :: nice_response -> string
niceBodyString? (NiceResponse _ _ body) = bytesToString body

niceGetScheme :: string -> maybe string
niceGetScheme url = scheme !? Nothing
where
  scheme = try $ lookup "scheme" $ parseUrl url

niceGetHost :: string -> maybe string
niceGetHost url = host !? Nothing
where
  host = try $ lookup "host" $ parseUrl url

niceGetPort :: string -> maybe int
niceGetPort url = if nothing? port then
                    Nothing
                  else
                    Just (just port |> parseInt)
where
  port = fromResult Nothing $ try $ lookup "port" $ parseUrl url

niceGetPath :: string -> maybe string
niceGetPath url = path !? Nothing
where
  path = try $ lookup "path" $ parseUrl url

niceGetQuery :: string -> maybe string
niceGetQuery url = query !? Nothing
where
  query = try $ lookup "query" $ parseUrl url

niceRequest :: nice_request -> nice_response
niceRequest (NiceRequest method url headers data)
= case method of
    NiceMethodGET     -> doRequestGETLike  "GET"
  | NiceMethodHEAD    -> doRequestGETLike  "HEAD"
  | NiceMethodPOST    -> doRequestPOSTLike "POST"
  | NiceMethodPUT     -> doRequestPOSTLike "PUT"
  | NiceMethodDELETE  -> doRequestGETLike  "DELETE"
  | NiceMethodOPTIONS -> doRequestGETLike  "OPTIONS"
  | NiceMethodPATCH   -> doRequestPOSTLike "PATCH"
where
  doRequestGETLike method
  = doRequest $ stringToBytes method
                ++ B" /"
                ++ stringToBytes path
                ++ stringToBytes query
                ++ B" HTTP/1.0\r\n"
                ++ B"Host: " ++ stringToBytes host ++ B"\r\n"
                ++ intercalate B"\r\n" (map stringToBytes headers')
                ++ B"\r\n\r\n"
     
  doRequestPOSTLike method
  = doRequest $ stringToBytes method
                ++ B" /"
                ++ stringToBytes path
                ++ stringToBytes query
                ++ B" HTTP/1.0\r\n"
                ++ B"Host: " ++ stringToBytes host ++ B"\r\n"
                ++ B"Content-Length: " ++ stringToBytes (show $ len? data) ++ B"\r\n"
                ++ intercalate B"\r\n" (map stringToBytes headers')
                ++ B"\r\n\r\n"
                ++ data 

  doRequest request = processResponse $ httpRequestRaw host port isHTTPS request
  processResponse response = NiceResponse status response_headers response_body
    where
      status = status_line ~~! R"^HTTP/.\.. (\d+) .*$"
               |> parseInt
      status_line = head response_head'
      response_headers = drop 1 response_head'
                         |> map (unpair . (~~ R"(\w+): (.*)"))

      response_head' = response_head
                       |> bytesToString
                       |> explode "\r\n"
      [response_head, response_body] = explode B"\r\n\r\n" response

  isHTTPS = scheme == "https"

  scheme = case niceGetScheme url ?? "http" of
             "http"  -> "http"
           | "https" -> "https"
           | other   -> error "niceRequest: unsupported protocol: " ++ other

  host = niceGetHost url ??! "niceRequest: malformed URL: missing scheme or host"

  port = niceGetPort url ?? cond (scheme == "http") 80 443

  path = niceGetPath url ?? ""

  query = if not $ empty? query' then "?" ++ query' else query'
  query' = niceGetQuery url ?? ""

  headers' = map ((k, v) -> k ++ ": " ++ v) headers

niceDefaultUserAgent = "nicerequests/0.3"

niceAppendDefaultUserAgent :: assoclist string string -> assoclist string string
niceAppendDefaultUserAgent headers
= if has? "User-Agent" headers then
    headers
  else
    expand "User-Agent" niceDefaultUserAgent headers

niceGet :: string -> assoclist string string -> nice_response
niceGet url headers = niceRequest $ NiceRequest NiceMethodGET url (niceAppendDefaultUserAgent headers) B""

niceHead :: string -> assoclist string string -> nice_response
niceHead url headers = niceRequest $ NiceRequest NiceMethodHEAD url (niceAppendDefaultUserAgent headers) B""

nicePost :: string -> assoclist string string -> bytes -> nice_response
nicePost url headers data = niceRequest $ NiceRequest NiceMethodPOST url (niceAppendDefaultUserAgent headers) data

nicePut :: string -> assoclist string string -> bytes -> nice_response
nicePut url headers data = niceRequest $ NiceRequest NiceMethodPUT url (niceAppendDefaultUserAgent headers) data

niceDelete :: string -> assoclist string string -> nice_response
niceDelete url headers = niceRequest $ NiceRequest NiceMethodDELETE url (niceAppendDefaultUserAgent headers) B""

niceOptions :: string -> assoclist string string -> nice_response
niceOptions url headers = niceRequest $ NiceRequest NiceMethodOPTIONS url (niceAppendDefaultUserAgent headers) B""

nicePatch :: string -> assoclist string string -> bytes -> nice_response
nicePatch url headers data = niceRequest $ NiceRequest NiceMethodPATCH url (niceAppendDefaultUserAgent headers) data

niceGetSimple :: string -> string
niceGetSimple url = niceBodyString? $ niceGet url []

niceGetBinary :: string -> bytes
niceGetBinary url = niceBody? $ niceGet url []

nicePostSimple :: string -> string -> string -> string
nicePostSimple url content_type data = niceBodyString? $ nicePost url [("Content-Type", content_type)] $ stringToBytes data
